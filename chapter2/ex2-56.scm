(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
        (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum . args) (append (list '+) args))
(define (make-product . args) (append (list '*) args))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (exponentiation? p) (and (pair? p) (eq? (car p) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))
(define (make-exponentiation x n) (cond ((= n 0) 1)
                                        ((= n 1) x)
                                        (else (list '** x n))))

(define (deriv exp var)
     (cond ((number? exp) 0)
           ((variable? exp) (if (same-variable? exp var) 1 0))
           ((sum? exp) (make-sum (deriv (addend exp) var)
                                 (deriv (augend exp) var)))
           ((product? exp)
            (make-sum
              (make-product (multiplier exp)
                            (deriv (multiplicand exp) var))
              (make-product (deriv (multiplier exp) var)
                            (multiplicand exp))))
           ((exponentiation? exp) (make-product (make-product (exponent exp) (make-exponentiation (base exp) (- (exponent exp) 1))) (deriv (base exp) var)))
           (else
            (error "unknown expression type: DERIV" exp))))
