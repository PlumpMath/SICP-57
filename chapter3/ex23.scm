(define (make-deque) 
	(let ((front-ptr '()) (rear-ptr '()))
		(define (empty-deque?) (null? front-ptr)) 
		(define (set-front-ptr! item) (set! front-ptr item)) 
		(define (set-rear-ptr! item) (set! rear-ptr item)) 
		(define (front-deque)  
			(if (empty-deque?) 
				(error "FRONT called with an empty queue") 
				(car front-ptr))) 
		(define (rear-deque)
			(if (empty-deque?)
				(error "REAR called with an empty queue")
				(car rear-ptr)))
		(define (insert-deque-front! item)
			(let ((new-pair (cons item '())))
				(cond 
					((empty-deque?)
						(set-cdr! new-pair (cons '() '()))
						(set-front-ptr! new-pair)
						(set-rear-ptr! new-pair))
					(else
						(set-car! (cdr front-ptr) new-pair)
						(set-cdr! new-pair (cons '() front-ptr))
						(set! front-ptr new-pair)))))
        (define (insert-deque-rear! item)
			(let ((new-pair (cons item '()))) 
				(cond 
					((empty-deque?) 
						(set-cdr! new-pair (cons '() '()))
						(set-front-ptr! new-pair) 
						(set-rear-ptr! new-pair)) 
					(else
						(set-cdr! (cdr rear-ptr) new-pair)
						(set-cdr! new-pair (cons rear-ptr '())) 
						(set! rear-ptr new-pair))))) 
		(define (delete-deque-front!) 
			(cond 
				((empty-deque?) 
					(error "DELETE-FRONT called with an emtpy queue")) 
                ((or (null? (cdr front-ptr)) (null? (cddr front-ptr)))  
					(set-front-ptr! '())
					(set-rear-ptr! '()))
				(else
					(set-front-ptr! (cddr front-ptr))
					(set-car! (cdr front-ptr) '())))) 
		(define (delete-deque-rear!)
			(cond 
				((empty-deque?)
					(error "DELETE-REAR called with an emtpy queue"))
				((or (null? (cdr rear-ptr)) (null? (cadr rear-ptr)))
					(set-front-ptr! '())
					(set-rear-ptr! '()))
				(else 
					(set-rear-ptr! (cadr rear-ptr))
                    (set-cdr! (cdr rear-ptr) '()))))	
		(define (print-deque) 
			(define (print-deque-iter current result)
				(let ((next (cddr current)) (current-item (cons (car current) '()))) 
					(if (null? next)
						(if (null? result) current-item (append result current-item))
						(print-deque-iter next (if (null? result) current-item (append result current-item))))))
			(print-deque-iter front-ptr '()))
		(define (dispatch m) 
			(cond ((eq? m 'empty-deque) emtpy-queue?) 
                 ((eq? m 'front-deque) front-deque)
                 ((eq? m 'rear-deque) rear-deque) 
                 ((eq? m 'insert-deque-front!) insert-deque-front!)
                 ((eq? m 'insert-deque-rear!) insert-deque-rear!) 
                 ((eq? m 'delete-deque-front!) delete-deque-front!)
				 ((eq? m 'delete-deque-rear!) delete-deque-rear!) 
                 ((eq? m 'print-deque) (print-deque)) 
                 (else (error "undefined operation -- DEQUE" m)))) 
         dispatch))

(define dq (make-deque))

((dq 'insert-deque-front!) 'a)
((dq 'insert-deque-front!) 'b)
((dq 'insert-deque-rear!) 'c)

(dq 'print-deque)



 
